{"version":3,"sources":["processEnv.ts","queries/covidCasesQueries.ts","redux/covidCases/types.ts","stardog/StardogContext.tsx","KeplerDemo.jsx","stardog/useQuery.ts","redux/covidCases/actions.ts","redux/appState.js","redux/covidCases/reducers.ts","App.tsx","redux/configureStore.js","index.tsx","../node_modules/colorbrewer sync","../node_modules/kepler.gl/dist/localization sync /^/.//.*$"],"names":["processEnv","REACT_APP_MAPBOX_TOKEN","process","covidCasesQuery","join","CovidCasesDataUpdate","StardogContext","createContext","connection","StardogProvider","username","password","endpoint","children","Connection","Provider","value","KeplerDemo","covidCasesData","useSelector","state","dispatch","useDispatch","useContext","useState","loading","setLoading","error","setError","data","setData","useCallback","a","readQuery","dbName","query","execute","response","ok","status","statusText","bindings","body","results","useQuery","getCovidCases","getCovidCasesResponseData","useEffect","length","type","covidCases","covidCasesInKeplarData","fields","name","format","rows","map","covidCase","Object","keys","currentKey","Number","addDataToMap","datasets","info","label","id","options","keepExistingConfig","config","visState","layers","dataId","color","columns","lat","lng","isVisible","visConfig","opacity","radius","hidden","visualChannels","weightField","weightScale","updateMap","latitude","longitude","zoom","JSON","stringify","style","width","height","position","left","top","visibility","mapboxApiAccessToken","appReducer","combineReducers","keplerGl","keplerGlReducer","action","store","initialState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","taskMiddleware","configureStore","App","ReactDOM","render","document","getElementById","webpackEmptyContext","req","e","Error","code","resolve","module","exports","webpackContext","webpackContextResolve","__webpack_require__","o"],"mappings":"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","file":"static/js/main.c611beed.chunk.js","sourcesContent":["export const processEnv = {\n    REACT_APP_MAPBOX_TOKEN: process.env.REACT_APP_MAPBOX_TOKEN,\n}\n","export const covidDbName = 'covid19nyt'\n\nconst selectColumnNames = [\n    'countyName',\n    'cases',\n    'population',\n    'percentCases',\n    'lat',\n    'lng',\n] as const\n\nexport type CovidCasesSelectColumnNames = typeof selectColumnNames[number]\n\nexport const covidCasesQuery = `PREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX p: <http://www.wikidata.org/prop/>\nPREFIX ps: <http://www.wikidata.org/prop/statement/>\nPREFIX psv: <http://www.wikidata.org/prop/statement/value/>\nPREFIX wikibase: <http://wikiba.se/ontology#>\n\nSELECT ?${selectColumnNames.join(' ?')}\n{\n    # get the latest date\n    { SELECT (max(?d) as ?date) { ?r :date ?d } }\n\n    # get all the reports for the latest date\n    ?report\n        :cases ?cases  ;\n        :date ?date ;                \n        :county [\n            rdfs:label ?countyName ;\n            :fips ?fips\n        ]    \n\n    # Get coordinates of\n    SERVICE <https://query.wikidata.org/sparql> \n    {\n        SELECT * {\n            ?item wdt:P882 ?fips ;\n                  wdt:P1082 ?population ;\n                  p:P625 ?coordPoint .\n            ?coordPoint psv:P625 ?coord_node .\n            ?coord_node wikibase:geoLongitude ?lng ;\n                        wikibase:geoLatitude ?lat .\n        }\n    }   \n    # compute percentages\n    BIND(roundHalfToEven((?cases / ?population) * 100, 2) AS ?percentCases)\n}\nORDER BY desc(?percentCases)`\n","import { CovidCasesSelectColumnNames } from 'queries/covidCasesQueries'\nimport { DataProps } from 'stardog/useQuery'\n\nexport const CovidCasesDataUpdate = 'CovidCasesDataUpdate'\n\nexport interface CovidCasesDataUpdateAction {\n    type: typeof CovidCasesDataUpdate\n    covidCases: Record<CovidCasesSelectColumnNames, DataProps>[]\n}\n\nexport type CovidCasesDataActionTypes = CovidCasesDataUpdateAction\n","import { createContext, FC } from 'react'\nimport { Connection } from 'stardog'\n\nexport interface StardogContextProps {\n    connection: Connection\n}\n\nexport const StardogContext = createContext<StardogContextProps>({\n    connection: {} as Connection,\n})\n\nexport interface StardogProviderProps {\n    username: string\n    password: string\n    endpoint: string\n}\n\nexport const StardogProvider: FC<StardogProviderProps> = ({\n    username,\n    password,\n    endpoint,\n    children,\n}) => {\n    const connection = new Connection({\n        username,\n        password,\n        endpoint,\n    })\n\n    return (\n        <StardogContext.Provider\n            value={{\n                connection,\n            }}\n        >\n            {children}\n        </StardogContext.Provider>\n    )\n}\n","import KeplerGl from 'kepler.gl'\nimport { addDataToMap, updateMap } from 'kepler.gl/actions'\nimport { processEnv } from 'processEnv'\nimport { covidCasesQuery, covidDbName } from 'queries/covidCasesQueries'\nimport { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AutoSizer } from 'react-virtualized'\nimport { covidCasesDataUpdateData } from 'redux/covidCases/actions'\nimport { useQuery } from 'stardog/useQuery'\n\nconst KeplerDemo = () => {\n    const { covidCasesData } = useSelector((state) => state)\n    const dispatch = useDispatch()\n\n    const [\n        getCovidCases,\n        { data: getCovidCasesResponseData, loading, error },\n    ] = useQuery()\n\n    useEffect(() => {\n        if (!covidCasesData.length) {\n            getCovidCases({\n                dbName: covidDbName,\n                readQuery: covidCasesQuery,\n            })\n        }\n    }, [dispatch, covidCasesData, getCovidCases])\n\n    useEffect(() => {\n        if (!getCovidCasesResponseData?.length) return\n\n        // This is just a sample on how to dispatch to our own redux\n        // This is not used elsewhere.\n        dispatch(covidCasesDataUpdateData(getCovidCasesResponseData))\n\n        const covidCasesRows = getCovidCasesResponseData.map((covidCase) => {\n            const currentKeys = Object.keys(covidCase)\n            return currentKeys.map((currentKey) => {\n                if (currentKey === 'countyName')\n                    return covidCase[currentKey].value\n                return Number(covidCase[currentKey].value)\n            })\n        })\n\n        const covidCasesInKeplarData = {\n            fields: [\n                { name: 'cases', format: '', type: 'integer' },\n                { name: 'lng', format: '', type: 'real' },\n                { name: 'percentCases', format: '', type: 'real' },\n                { name: 'lat', format: '', type: 'real' },\n                { name: 'countyName', format: '', type: 'string' },\n                { name: 'population', format: '', type: 'integer' },\n            ],\n            rows: covidCasesRows,\n        }\n\n        dispatch(\n            addDataToMap({\n                datasets: {\n                    info: {\n                        label: 'Counties with most cases per capita',\n                        id: 'covid_cases',\n                    },\n                    data: covidCasesInKeplarData,\n                },\n                options: {\n                    keepExistingConfig: true,\n                },\n                config: {\n                    visState: {\n                        layers: [\n                            {\n                                id: 'wtp9fb',\n                                type: 'heatmap',\n                                config: {\n                                    dataId: 'covid_cases',\n                                    label: 'Covid Cases Heatmap',\n                                    color: [248, 149, 112],\n                                    columns: {\n                                        lat: 'lat',\n                                        lng: 'lng',\n                                    },\n                                    isVisible: true,\n                                    visConfig: {\n                                        opacity: 0.8,\n                                        radius: 97.4,\n                                    },\n                                    hidden: false,\n                                },\n                                visualChannels: {\n                                    weightField: {\n                                        name: 'percentCases',\n                                        type: 'real',\n                                    },\n                                    weightScale: 'linear',\n                                },\n                            },\n                        ],\n                    },\n                },\n            })\n        )\n        dispatch(\n            updateMap({\n                latitude: 39.738756,\n                longitude: -105.023357,\n                zoom: 4,\n            })\n        )\n    }, [dispatch, getCovidCasesResponseData])\n\n    if (error) return <div>Error! {JSON.stringify(error)}</div>\n\n    return (\n        <>\n            {loading && <div>Fancy loading screen...</div>}\n            <div\n                style={{\n                    width: '100%',\n                    height: '100%',\n                    position: 'absolute',\n                    left: 0,\n                    top: 0,\n                    visibility: loading ? 'hidden' : 'unset',\n                }}\n            >\n                <AutoSizer>\n                    {({ height, width }) => (\n                        <KeplerGl\n                            id=\"map\"\n                            mapboxApiAccessToken={\n                                processEnv.REACT_APP_MAPBOX_TOKEN\n                            }\n                            width={width}\n                            height={height}\n                        />\n                    )}\n                </AutoSizer>\n            </div>\n        </>\n    )\n}\n\nexport default KeplerDemo\n","import { useCallback, useContext, useState } from 'react'\nimport { query } from 'stardog'\nimport { StardogContext, StardogContextProps } from './StardogContext'\n\nexport interface ErrorResponse {\n    status: number\n    statusText: string\n}\n\nexport interface DataProps {\n    datatype?: string\n    type: string\n    value: string\n}\n\nexport type RowDataType<TKey extends string> = Record<TKey, DataProps>\n\nexport interface UseQueryResultProps<TKey extends string> {\n    data: RowDataType<TKey>[] | null\n    error?: ErrorResponse\n    loading: boolean\n}\n\nexport interface RunQueryProps {\n    dbName: string\n    readQuery: string\n}\n\nexport const useQuery = <TKey extends string>(): [\n    (runQueryProps: RunQueryProps) => Promise<void>,\n    UseQueryResultProps<TKey>\n] => {\n    const { connection } = useContext<StardogContextProps>(StardogContext)\n    const [loading, setLoading] = useState<boolean>(false)\n    const [error, setError] = useState<ErrorResponse>()\n    const [data, setData] = useState<RowDataType<TKey>[] | null>(null)\n\n    const runQuery = useCallback(\n        async ({ readQuery, dbName }: RunQueryProps) => {\n            setLoading(true)\n            const response = await query.execute(connection, dbName, readQuery)\n\n            if (!response.ok) {\n                setError({\n                    status: response.status,\n                    statusText: response.statusText,\n                })\n                setLoading(false)\n                return\n            }\n\n            const { bindings } = response.body.results\n            setData(bindings as RowDataType<TKey>[])\n            setLoading(false)\n        },\n        [connection]\n    )\n\n    return [\n        runQuery,\n        {\n            error,\n            loading,\n            data,\n        },\n    ]\n}\n","import { CovidCasesSelectColumnNames } from 'queries/covidCasesQueries'\nimport { DataProps } from 'stardog/useQuery'\nimport { CovidCasesDataUpdate, CovidCasesDataUpdateAction } from './types'\n\nexport const covidCasesDataUpdateData = (\n    covidCases: Record<CovidCasesSelectColumnNames, DataProps>[]\n): CovidCasesDataUpdateAction => ({\n    type: CovidCasesDataUpdate,\n    covidCases,\n})\n","import keplerGlReducer from 'kepler.gl/reducers'\nimport { combineReducers } from 'redux'\nimport { covidCasesReducer } from './covidCases/reducers'\n\nexport const appReducer = combineReducers({\n    keplerGl: keplerGlReducer,\n    covidCasesData: covidCasesReducer,\n})\n\n// export type AppState = CombinedState<IAppState>\n","import { CovidCasesSelectColumnNames } from 'queries/covidCasesQueries'\nimport { DataProps } from 'stardog/useQuery'\nimport { CovidCasesDataActionTypes, CovidCasesDataUpdate } from './types'\n\nexport const covidCasesReducer = (\n    state = [] as Record<CovidCasesSelectColumnNames, DataProps>[],\n    action: CovidCasesDataActionTypes\n): Record<CovidCasesSelectColumnNames, DataProps>[] => {\n    switch (action.type) {\n        case CovidCasesDataUpdate:\n            return action.covidCases\n        default:\n            return state\n    }\n}\n","import KeplerDemo from 'KeplerDemo'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport configureStore from 'redux/configureStore'\nimport { StardogProvider } from 'stardog/StardogContext'\n\nexport const store = configureStore()\n\nconst App = () => {\n    return (\n        <ReduxProvider store={store}>\n            <StardogProvider\n                username=\"anonymous\"\n                password=\"anonymous\"\n                endpoint=\"https://express.stardog.cloud:5820\"\n            >\n                <KeplerDemo />\n            </StardogProvider>\n        </ReduxProvider>\n    )\n}\n\nexport default App\n","import { taskMiddleware } from 'react-palm/tasks'\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { appReducer } from './appState'\n\nconst configureStore = (initialState) => {\n    const composeEnhancers =\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n    return createStore(\n        appReducer,\n        initialState,\n        composeEnhancers(applyMiddleware(taskMiddleware))\n    )\n}\n\nexport default configureStore\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 920;","var map = {\n\t\"./\": 38,\n\t\"./ca\": 589,\n\t\"./ca.js\": 589,\n\t\"./en\": 425,\n\t\"./en.js\": 425,\n\t\"./es\": 590,\n\t\"./es.js\": 590,\n\t\"./fi\": 591,\n\t\"./fi.js\": 591,\n\t\"./formatted-message\": 426,\n\t\"./formatted-message.js\": 426,\n\t\"./index\": 38,\n\t\"./index.js\": 38,\n\t\"./locales\": 145,\n\t\"./locales.js\": 145,\n\t\"./pt\": 592,\n\t\"./pt.js\": 592\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 958;"],"sourceRoot":""}